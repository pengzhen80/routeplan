// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmanagement_ordermanagement.proto

#include "dbmanagement_ordermanagement.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpc_dbmanagement {
constexpr Request_Insert_Goods_Info::Request_Insert_Goods_Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Request_Insert_Goods_InfoDefaultTypeInternal {
  constexpr Request_Insert_Goods_InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Request_Insert_Goods_InfoDefaultTypeInternal() {}
  union {
    Request_Insert_Goods_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Request_Insert_Goods_InfoDefaultTypeInternal _Request_Insert_Goods_Info_default_instance_;
constexpr Request_Insert_Order_Data::Request_Insert_Order_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : goods_info_(nullptr)
  , goods_pos_(0)
  , target_pos_(0){}
struct Request_Insert_Order_DataDefaultTypeInternal {
  constexpr Request_Insert_Order_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Request_Insert_Order_DataDefaultTypeInternal() {}
  union {
    Request_Insert_Order_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Request_Insert_Order_DataDefaultTypeInternal _Request_Insert_Order_Data_default_instance_;
constexpr Request_Insert::Request_Insert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , number_(0)
  , time_(0){}
struct Request_InsertDefaultTypeInternal {
  constexpr Request_InsertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Request_InsertDefaultTypeInternal() {}
  union {
    Request_Insert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Request_InsertDefaultTypeInternal _Request_Insert_default_instance_;
constexpr Reply_Insert::Reply_Insert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insert_result_(false){}
struct Reply_InsertDefaultTypeInternal {
  constexpr Reply_InsertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Reply_InsertDefaultTypeInternal() {}
  union {
    Reply_Insert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Reply_InsertDefaultTypeInternal _Reply_Insert_default_instance_;
}  // namespace grpc_dbmanagement
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dbmanagement_5fordermanagement_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dbmanagement_5fordermanagement_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dbmanagement_5fordermanagement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dbmanagement_5fordermanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Goods_Info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Goods_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Goods_Info, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Order_Data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Order_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Order_Data, goods_info_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Order_Data, goods_pos_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert_Order_Data, target_pos_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, number_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, time_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, data_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, type_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Request_Insert, result_),
  3,
  4,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Reply_Insert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Reply_Insert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc_dbmanagement::Reply_Insert, insert_result_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::grpc_dbmanagement::Request_Insert_Goods_Info)},
  { 7, 15, sizeof(::grpc_dbmanagement::Request_Insert_Order_Data)},
  { 18, 28, sizeof(::grpc_dbmanagement::Request_Insert)},
  { 33, 39, sizeof(::grpc_dbmanagement::Reply_Insert)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_dbmanagement::_Request_Insert_Goods_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_dbmanagement::_Request_Insert_Order_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_dbmanagement::_Request_Insert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc_dbmanagement::_Reply_Insert_default_instance_),
};

const char descriptor_table_protodef_dbmanagement_5fordermanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dbmanagement_ordermanagement.proto\022\021gr"
  "pc_dbmanagement\"\257\003\n\016Request_Insert\022\023\n\006nu"
  "mber\030\001 \001(\005H\000\210\001\001\022\021\n\004time\030\002 \001(\005H\001\210\001\001\022\?\n\004da"
  "ta\030\003 \001(\0132,.grpc_dbmanagement.Request_Ins"
  "ert.Order_DataH\002\210\001\001\022\021\n\004type\030\004 \001(\tH\003\210\001\001\022\023"
  "\n\006result\030\005 \001(\tH\004\210\001\001\032(\n\nGoods_Info\022\021\n\004nam"
  "e\030\001 \001(\tH\000\210\001\001B\007\n\005_name\032\260\001\n\nOrder_Data\022E\n\n"
  "goods_info\030\001 \001(\0132,.grpc_dbmanagement.Req"
  "uest_Insert.Goods_InfoH\000\210\001\001\022\026\n\tgoods_pos"
  "\030\002 \001(\005H\001\210\001\001\022\027\n\ntarget_pos\030\003 \001(\005H\002\210\001\001B\r\n\013"
  "_goods_infoB\014\n\n_goods_posB\r\n\013_target_pos"
  "B\t\n\007_numberB\007\n\005_timeB\007\n\005_dataB\007\n\005_typeB\t"
  "\n\007_result\"<\n\014Reply_Insert\022\032\n\rinsert_resu"
  "lt\030\001 \001(\010H\000\210\001\001B\020\n\016_insert_result2v\n$DBMan"
  "agement_OrderManagement_Service\022N\n\006Inser"
  "t\022!.grpc_dbmanagement.Request_Insert\032\037.g"
  "rpc_dbmanagement.Reply_Insert\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dbmanagement_5fordermanagement_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbmanagement_5fordermanagement_2eproto = {
  false, false, 679, descriptor_table_protodef_dbmanagement_5fordermanagement_2eproto, "dbmanagement_ordermanagement.proto", 
  &descriptor_table_dbmanagement_5fordermanagement_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_dbmanagement_5fordermanagement_2eproto::offsets,
  file_level_metadata_dbmanagement_5fordermanagement_2eproto, file_level_enum_descriptors_dbmanagement_5fordermanagement_2eproto, file_level_service_descriptors_dbmanagement_5fordermanagement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dbmanagement_5fordermanagement_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmanagement_5fordermanagement_2eproto);
  return descriptor_table_dbmanagement_5fordermanagement_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dbmanagement_5fordermanagement_2eproto(&descriptor_table_dbmanagement_5fordermanagement_2eproto);
namespace grpc_dbmanagement {

// ===================================================================

class Request_Insert_Goods_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_Insert_Goods_Info>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Request_Insert_Goods_Info::Request_Insert_Goods_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_dbmanagement.Request_Insert.Goods_Info)
}
Request_Insert_Goods_Info::Request_Insert_Goods_Info(const Request_Insert_Goods_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpc_dbmanagement.Request_Insert.Goods_Info)
}

void Request_Insert_Goods_Info::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Request_Insert_Goods_Info::~Request_Insert_Goods_Info() {
  // @@protoc_insertion_point(destructor:grpc_dbmanagement.Request_Insert.Goods_Info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request_Insert_Goods_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request_Insert_Goods_Info::ArenaDtor(void* object) {
  Request_Insert_Goods_Info* _this = reinterpret_cast< Request_Insert_Goods_Info* >(object);
  (void)_this;
}
void Request_Insert_Goods_Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_Insert_Goods_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request_Insert_Goods_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request_Insert_Goods_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc_dbmanagement.Request_Insert.Goods_Info.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_Insert_Goods_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc_dbmanagement.Request_Insert.Goods_Info.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_dbmanagement.Request_Insert.Goods_Info)
  return target;
}

size_t Request_Insert_Goods_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_Insert_Goods_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_Insert_Goods_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request_Insert_Goods_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_dbmanagement.Request_Insert.Goods_Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_dbmanagement.Request_Insert.Goods_Info)
    MergeFrom(*source);
  }
}

void Request_Insert_Goods_Info::MergeFrom(const Request_Insert_Goods_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void Request_Insert_Goods_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Insert_Goods_Info::CopyFrom(const Request_Insert_Goods_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_dbmanagement.Request_Insert.Goods_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Insert_Goods_Info::IsInitialized() const {
  return true;
}

void Request_Insert_Goods_Info::InternalSwap(Request_Insert_Goods_Info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Request_Insert_Goods_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Request_Insert_Order_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_Insert_Order_Data>()._has_bits_);
  static const ::grpc_dbmanagement::Request_Insert_Goods_Info& goods_info(const Request_Insert_Order_Data* msg);
  static void set_has_goods_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_goods_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::grpc_dbmanagement::Request_Insert_Goods_Info&
Request_Insert_Order_Data::_Internal::goods_info(const Request_Insert_Order_Data* msg) {
  return *msg->goods_info_;
}
Request_Insert_Order_Data::Request_Insert_Order_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_dbmanagement.Request_Insert.Order_Data)
}
Request_Insert_Order_Data::Request_Insert_Order_Data(const Request_Insert_Order_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_goods_info()) {
    goods_info_ = new ::grpc_dbmanagement::Request_Insert_Goods_Info(*from.goods_info_);
  } else {
    goods_info_ = nullptr;
  }
  ::memcpy(&goods_pos_, &from.goods_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_pos_) -
    reinterpret_cast<char*>(&goods_pos_)) + sizeof(target_pos_));
  // @@protoc_insertion_point(copy_constructor:grpc_dbmanagement.Request_Insert.Order_Data)
}

void Request_Insert_Order_Data::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&goods_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_pos_) -
    reinterpret_cast<char*>(&goods_info_)) + sizeof(target_pos_));
}

Request_Insert_Order_Data::~Request_Insert_Order_Data() {
  // @@protoc_insertion_point(destructor:grpc_dbmanagement.Request_Insert.Order_Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request_Insert_Order_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete goods_info_;
}

void Request_Insert_Order_Data::ArenaDtor(void* object) {
  Request_Insert_Order_Data* _this = reinterpret_cast< Request_Insert_Order_Data* >(object);
  (void)_this;
}
void Request_Insert_Order_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_Insert_Order_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request_Insert_Order_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_dbmanagement.Request_Insert.Order_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && goods_info_ != nullptr) {
      delete goods_info_;
    }
    goods_info_ = nullptr;
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&goods_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_pos_) -
        reinterpret_cast<char*>(&goods_pos_)) + sizeof(target_pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request_Insert_Order_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc_dbmanagement.Request_Insert.Goods_Info goods_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_goods_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goods_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_goods_pos(&has_bits);
          goods_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_pos(&has_bits);
          target_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_Insert_Order_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_dbmanagement.Request_Insert.Order_Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc_dbmanagement.Request_Insert.Goods_Info goods_info = 1;
  if (_internal_has_goods_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::goods_info(this), target, stream);
  }

  // int32 goods_pos = 2;
  if (_internal_has_goods_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goods_pos(), target);
  }

  // int32 target_pos = 3;
  if (_internal_has_target_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_dbmanagement.Request_Insert.Order_Data)
  return target;
}

size_t Request_Insert_Order_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_dbmanagement.Request_Insert.Order_Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .grpc_dbmanagement.Request_Insert.Goods_Info goods_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *goods_info_);
    }

    // int32 goods_pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_goods_pos());
    }

    // int32 target_pos = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_target_pos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_Insert_Order_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_dbmanagement.Request_Insert.Order_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_Insert_Order_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request_Insert_Order_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_dbmanagement.Request_Insert.Order_Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_dbmanagement.Request_Insert.Order_Data)
    MergeFrom(*source);
  }
}

void Request_Insert_Order_Data::MergeFrom(const Request_Insert_Order_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_dbmanagement.Request_Insert.Order_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_goods_info()->::grpc_dbmanagement::Request_Insert_Goods_Info::MergeFrom(from._internal_goods_info());
    }
    if (cached_has_bits & 0x00000002u) {
      goods_pos_ = from.goods_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_pos_ = from.target_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_Insert_Order_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_dbmanagement.Request_Insert.Order_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Insert_Order_Data::CopyFrom(const Request_Insert_Order_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_dbmanagement.Request_Insert.Order_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Insert_Order_Data::IsInitialized() const {
  return true;
}

void Request_Insert_Order_Data::InternalSwap(Request_Insert_Order_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_Insert_Order_Data, target_pos_)
      + sizeof(Request_Insert_Order_Data::target_pos_)
      - PROTOBUF_FIELD_OFFSET(Request_Insert_Order_Data, goods_info_)>(
          reinterpret_cast<char*>(&goods_info_),
          reinterpret_cast<char*>(&other->goods_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request_Insert_Order_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Request_Insert::_Internal {
 public:
  using HasBits = decltype(std::declval<Request_Insert>()._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::grpc_dbmanagement::Request_Insert_Order_Data& data(const Request_Insert* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::grpc_dbmanagement::Request_Insert_Order_Data&
Request_Insert::_Internal::data(const Request_Insert* msg) {
  return *msg->data_;
}
Request_Insert::Request_Insert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_dbmanagement.Request_Insert)
}
Request_Insert::Request_Insert(const Request_Insert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_result()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::grpc_dbmanagement::Request_Insert_Order_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&number_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:grpc_dbmanagement.Request_Insert)
}

void Request_Insert::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&data_)) + sizeof(time_));
}

Request_Insert::~Request_Insert() {
  // @@protoc_insertion_point(destructor:grpc_dbmanagement.Request_Insert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request_Insert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void Request_Insert::ArenaDtor(void* object) {
  Request_Insert* _this = reinterpret_cast< Request_Insert* >(object);
  (void)_this;
}
void Request_Insert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request_Insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request_Insert::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_dbmanagement.Request_Insert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      result_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && data_ != nullptr) {
        delete data_;
      }
      data_ = nullptr;
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&number_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request_Insert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc_dbmanagement.Request_Insert.Order_Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc_dbmanagement.Request_Insert.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "grpc_dbmanagement.Request_Insert.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request_Insert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_dbmanagement.Request_Insert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  // int32 time = 2;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // .grpc_dbmanagement.Request_Insert.Order_Data data = 3;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // string type = 4;
  if (_internal_has_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc_dbmanagement.Request_Insert.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string result = 5;
  if (_internal_has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpc_dbmanagement.Request_Insert.result");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_dbmanagement.Request_Insert)
  return target;
}

size_t Request_Insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_dbmanagement.Request_Insert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string type = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // string result = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_result());
    }

    // .grpc_dbmanagement.Request_Insert.Order_Data data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // int32 number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number());
    }

    // int32 time = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request_Insert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_dbmanagement.Request_Insert)
  GOOGLE_DCHECK_NE(&from, this);
  const Request_Insert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request_Insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_dbmanagement.Request_Insert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_dbmanagement.Request_Insert)
    MergeFrom(*source);
  }
}

void Request_Insert::MergeFrom(const Request_Insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_dbmanagement.Request_Insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_result(from._internal_result());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::grpc_dbmanagement::Request_Insert_Order_Data::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request_Insert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_dbmanagement.Request_Insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Insert::CopyFrom(const Request_Insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_dbmanagement.Request_Insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Insert::IsInitialized() const {
  return true;
}

void Request_Insert::InternalSwap(Request_Insert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request_Insert, time_)
      + sizeof(Request_Insert::time_)
      - PROTOBUF_FIELD_OFFSET(Request_Insert, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request_Insert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Reply_Insert::_Internal {
 public:
  using HasBits = decltype(std::declval<Reply_Insert>()._has_bits_);
  static void set_has_insert_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Reply_Insert::Reply_Insert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc_dbmanagement.Reply_Insert)
}
Reply_Insert::Reply_Insert(const Reply_Insert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  insert_result_ = from.insert_result_;
  // @@protoc_insertion_point(copy_constructor:grpc_dbmanagement.Reply_Insert)
}

void Reply_Insert::SharedCtor() {
insert_result_ = false;
}

Reply_Insert::~Reply_Insert() {
  // @@protoc_insertion_point(destructor:grpc_dbmanagement.Reply_Insert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reply_Insert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Reply_Insert::ArenaDtor(void* object) {
  Reply_Insert* _this = reinterpret_cast< Reply_Insert* >(object);
  (void)_this;
}
void Reply_Insert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reply_Insert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reply_Insert::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc_dbmanagement.Reply_Insert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  insert_result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply_Insert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool insert_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_insert_result(&has_bits);
          insert_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reply_Insert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc_dbmanagement.Reply_Insert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool insert_result = 1;
  if (_internal_has_insert_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_insert_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc_dbmanagement.Reply_Insert)
  return target;
}

size_t Reply_Insert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc_dbmanagement.Reply_Insert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool insert_result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reply_Insert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc_dbmanagement.Reply_Insert)
  GOOGLE_DCHECK_NE(&from, this);
  const Reply_Insert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reply_Insert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc_dbmanagement.Reply_Insert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc_dbmanagement.Reply_Insert)
    MergeFrom(*source);
  }
}

void Reply_Insert::MergeFrom(const Reply_Insert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc_dbmanagement.Reply_Insert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_insert_result()) {
    _internal_set_insert_result(from._internal_insert_result());
  }
}

void Reply_Insert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc_dbmanagement.Reply_Insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_Insert::CopyFrom(const Reply_Insert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc_dbmanagement.Reply_Insert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_Insert::IsInitialized() const {
  return true;
}

void Reply_Insert::InternalSwap(Reply_Insert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(insert_result_, other->insert_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply_Insert::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc_dbmanagement
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc_dbmanagement::Request_Insert_Goods_Info* Arena::CreateMaybeMessage< ::grpc_dbmanagement::Request_Insert_Goods_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_dbmanagement::Request_Insert_Goods_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc_dbmanagement::Request_Insert_Order_Data* Arena::CreateMaybeMessage< ::grpc_dbmanagement::Request_Insert_Order_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_dbmanagement::Request_Insert_Order_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc_dbmanagement::Request_Insert* Arena::CreateMaybeMessage< ::grpc_dbmanagement::Request_Insert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_dbmanagement::Request_Insert >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc_dbmanagement::Reply_Insert* Arena::CreateMaybeMessage< ::grpc_dbmanagement::Reply_Insert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc_dbmanagement::Reply_Insert >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
