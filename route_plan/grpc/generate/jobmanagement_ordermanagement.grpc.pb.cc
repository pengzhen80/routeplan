// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jobmanagement_ordermanagement.proto

#include "jobmanagement_ordermanagement.pb.h"
#include "jobmanagement_ordermanagement.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_jobmanagement {

static const char* JobManagement_OrderManagement_Service_method_names[] = {
  "/grpc_jobmanagement.JobManagement_OrderManagement_Service/ActOrder",
  "/grpc_jobmanagement.JobManagement_OrderManagement_Service/CancelOrder",
};

std::unique_ptr< JobManagement_OrderManagement_Service::Stub> JobManagement_OrderManagement_Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JobManagement_OrderManagement_Service::Stub> stub(new JobManagement_OrderManagement_Service::Stub(channel));
  return stub;
}

JobManagement_OrderManagement_Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ActOrder_(JobManagement_OrderManagement_Service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(JobManagement_OrderManagement_Service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status JobManagement_OrderManagement_Service::Stub::ActOrder(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order& request, ::grpc_jobmanagement::Reply_Act* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_jobmanagement::Request_Order, ::grpc_jobmanagement::Reply_Act, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActOrder_, context, request, response);
}

void JobManagement_OrderManagement_Service::Stub::experimental_async::ActOrder(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order* request, ::grpc_jobmanagement::Reply_Act* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_jobmanagement::Request_Order, ::grpc_jobmanagement::Reply_Act, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActOrder_, context, request, response, std::move(f));
}

void JobManagement_OrderManagement_Service::Stub::experimental_async::ActOrder(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order* request, ::grpc_jobmanagement::Reply_Act* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_jobmanagement::Reply_Act>* JobManagement_OrderManagement_Service::Stub::PrepareAsyncActOrderRaw(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_jobmanagement::Reply_Act, ::grpc_jobmanagement::Request_Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_jobmanagement::Reply_Act>* JobManagement_OrderManagement_Service::Stub::AsyncActOrderRaw(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status JobManagement_OrderManagement_Service::Stub::CancelOrder(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order& request, ::grpc_jobmanagement::Reply_Cancel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpc_jobmanagement::Request_Order, ::grpc_jobmanagement::Reply_Cancel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void JobManagement_OrderManagement_Service::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order* request, ::grpc_jobmanagement::Reply_Cancel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpc_jobmanagement::Request_Order, ::grpc_jobmanagement::Reply_Cancel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void JobManagement_OrderManagement_Service::Stub::experimental_async::CancelOrder(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order* request, ::grpc_jobmanagement::Reply_Cancel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpc_jobmanagement::Reply_Cancel>* JobManagement_OrderManagement_Service::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpc_jobmanagement::Reply_Cancel, ::grpc_jobmanagement::Request_Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpc_jobmanagement::Reply_Cancel>* JobManagement_OrderManagement_Service::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::grpc_jobmanagement::Request_Order& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

JobManagement_OrderManagement_Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JobManagement_OrderManagement_Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JobManagement_OrderManagement_Service::Service, ::grpc_jobmanagement::Request_Order, ::grpc_jobmanagement::Reply_Act, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JobManagement_OrderManagement_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_jobmanagement::Request_Order* req,
             ::grpc_jobmanagement::Reply_Act* resp) {
               return service->ActOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JobManagement_OrderManagement_Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< JobManagement_OrderManagement_Service::Service, ::grpc_jobmanagement::Request_Order, ::grpc_jobmanagement::Reply_Cancel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](JobManagement_OrderManagement_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpc_jobmanagement::Request_Order* req,
             ::grpc_jobmanagement::Reply_Cancel* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
}

JobManagement_OrderManagement_Service::Service::~Service() {
}

::grpc::Status JobManagement_OrderManagement_Service::Service::ActOrder(::grpc::ServerContext* context, const ::grpc_jobmanagement::Request_Order* request, ::grpc_jobmanagement::Reply_Act* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status JobManagement_OrderManagement_Service::Service::CancelOrder(::grpc::ServerContext* context, const ::grpc_jobmanagement::Request_Order* request, ::grpc_jobmanagement::Reply_Cancel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_jobmanagement

