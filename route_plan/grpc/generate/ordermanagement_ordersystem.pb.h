// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ordermanagement_ordersystem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ordermanagement_5fordersystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ordermanagement_5fordersystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ordermanagement_5fordersystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ordermanagement_5fordersystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ordermanagement_5fordersystem_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(int index);
namespace grpc_ordermanagement {
class Reply_AddOrder;
struct Reply_AddOrderDefaultTypeInternal;
extern Reply_AddOrderDefaultTypeInternal _Reply_AddOrder_default_instance_;
class Reply_CancelOrder;
struct Reply_CancelOrderDefaultTypeInternal;
extern Reply_CancelOrderDefaultTypeInternal _Reply_CancelOrder_default_instance_;
class Request_AddOrder;
struct Request_AddOrderDefaultTypeInternal;
extern Request_AddOrderDefaultTypeInternal _Request_AddOrder_default_instance_;
class Request_AddOrder_Goods_Info;
struct Request_AddOrder_Goods_InfoDefaultTypeInternal;
extern Request_AddOrder_Goods_InfoDefaultTypeInternal _Request_AddOrder_Goods_Info_default_instance_;
class Request_AddOrder_Order_Data;
struct Request_AddOrder_Order_DataDefaultTypeInternal;
extern Request_AddOrder_Order_DataDefaultTypeInternal _Request_AddOrder_Order_Data_default_instance_;
class Request_CancelOrder;
struct Request_CancelOrderDefaultTypeInternal;
extern Request_CancelOrderDefaultTypeInternal _Request_CancelOrder_default_instance_;
}  // namespace grpc_ordermanagement
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc_ordermanagement::Reply_AddOrder* Arena::CreateMaybeMessage<::grpc_ordermanagement::Reply_AddOrder>(Arena*);
template<> ::grpc_ordermanagement::Reply_CancelOrder* Arena::CreateMaybeMessage<::grpc_ordermanagement::Reply_CancelOrder>(Arena*);
template<> ::grpc_ordermanagement::Request_AddOrder* Arena::CreateMaybeMessage<::grpc_ordermanagement::Request_AddOrder>(Arena*);
template<> ::grpc_ordermanagement::Request_AddOrder_Goods_Info* Arena::CreateMaybeMessage<::grpc_ordermanagement::Request_AddOrder_Goods_Info>(Arena*);
template<> ::grpc_ordermanagement::Request_AddOrder_Order_Data* Arena::CreateMaybeMessage<::grpc_ordermanagement::Request_AddOrder_Order_Data>(Arena*);
template<> ::grpc_ordermanagement::Request_CancelOrder* Arena::CreateMaybeMessage<::grpc_ordermanagement::Request_CancelOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc_ordermanagement {

enum Request_AddOrder_TYPE : int {
  Request_AddOrder_TYPE_MEAL_DELIVERY = 0,
  Request_AddOrder_TYPE_MEAL_RECEPTION = 1,
  Request_AddOrder_TYPE_Request_AddOrder_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_AddOrder_TYPE_Request_AddOrder_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_AddOrder_TYPE_IsValid(int value);
constexpr Request_AddOrder_TYPE Request_AddOrder_TYPE_TYPE_MIN = Request_AddOrder_TYPE_MEAL_DELIVERY;
constexpr Request_AddOrder_TYPE Request_AddOrder_TYPE_TYPE_MAX = Request_AddOrder_TYPE_MEAL_RECEPTION;
constexpr int Request_AddOrder_TYPE_TYPE_ARRAYSIZE = Request_AddOrder_TYPE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_AddOrder_TYPE_descriptor();
template<typename T>
inline const std::string& Request_AddOrder_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_AddOrder_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_AddOrder_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_AddOrder_TYPE_descriptor(), enum_t_value);
}
inline bool Request_AddOrder_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_AddOrder_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_AddOrder_TYPE>(
    Request_AddOrder_TYPE_descriptor(), name, value);
}
enum Request_CancelOrder_TYPE : int {
  Request_CancelOrder_TYPE_CANCEL = 0,
  Request_CancelOrder_TYPE_Request_CancelOrder_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_CancelOrder_TYPE_Request_CancelOrder_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_CancelOrder_TYPE_IsValid(int value);
constexpr Request_CancelOrder_TYPE Request_CancelOrder_TYPE_TYPE_MIN = Request_CancelOrder_TYPE_CANCEL;
constexpr Request_CancelOrder_TYPE Request_CancelOrder_TYPE_TYPE_MAX = Request_CancelOrder_TYPE_CANCEL;
constexpr int Request_CancelOrder_TYPE_TYPE_ARRAYSIZE = Request_CancelOrder_TYPE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_CancelOrder_TYPE_descriptor();
template<typename T>
inline const std::string& Request_CancelOrder_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_CancelOrder_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_CancelOrder_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_CancelOrder_TYPE_descriptor(), enum_t_value);
}
inline bool Request_CancelOrder_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_CancelOrder_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_CancelOrder_TYPE>(
    Request_CancelOrder_TYPE_descriptor(), name, value);
}
enum Reply_CancelOrder_TYPE : int {
  Reply_CancelOrder_TYPE_SUCCESS = 0,
  Reply_CancelOrder_TYPE_FAIL = 1,
  Reply_CancelOrder_TYPE_Reply_CancelOrder_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Reply_CancelOrder_TYPE_Reply_CancelOrder_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Reply_CancelOrder_TYPE_IsValid(int value);
constexpr Reply_CancelOrder_TYPE Reply_CancelOrder_TYPE_TYPE_MIN = Reply_CancelOrder_TYPE_SUCCESS;
constexpr Reply_CancelOrder_TYPE Reply_CancelOrder_TYPE_TYPE_MAX = Reply_CancelOrder_TYPE_FAIL;
constexpr int Reply_CancelOrder_TYPE_TYPE_ARRAYSIZE = Reply_CancelOrder_TYPE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reply_CancelOrder_TYPE_descriptor();
template<typename T>
inline const std::string& Reply_CancelOrder_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reply_CancelOrder_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reply_CancelOrder_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reply_CancelOrder_TYPE_descriptor(), enum_t_value);
}
inline bool Reply_CancelOrder_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Reply_CancelOrder_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reply_CancelOrder_TYPE>(
    Reply_CancelOrder_TYPE_descriptor(), name, value);
}
// ===================================================================

class Request_AddOrder_Goods_Info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_ordermanagement.Request_AddOrder.Goods_Info) */ {
 public:
  inline Request_AddOrder_Goods_Info() : Request_AddOrder_Goods_Info(nullptr) {}
  virtual ~Request_AddOrder_Goods_Info();
  explicit constexpr Request_AddOrder_Goods_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_AddOrder_Goods_Info(const Request_AddOrder_Goods_Info& from);
  Request_AddOrder_Goods_Info(Request_AddOrder_Goods_Info&& from) noexcept
    : Request_AddOrder_Goods_Info() {
    *this = ::std::move(from);
  }

  inline Request_AddOrder_Goods_Info& operator=(const Request_AddOrder_Goods_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_AddOrder_Goods_Info& operator=(Request_AddOrder_Goods_Info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_AddOrder_Goods_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_AddOrder_Goods_Info* internal_default_instance() {
    return reinterpret_cast<const Request_AddOrder_Goods_Info*>(
               &_Request_AddOrder_Goods_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_AddOrder_Goods_Info& a, Request_AddOrder_Goods_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_AddOrder_Goods_Info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_AddOrder_Goods_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_AddOrder_Goods_Info* New() const final {
    return CreateMaybeMessage<Request_AddOrder_Goods_Info>(nullptr);
  }

  Request_AddOrder_Goods_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_AddOrder_Goods_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_AddOrder_Goods_Info& from);
  void MergeFrom(const Request_AddOrder_Goods_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_AddOrder_Goods_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_ordermanagement.Request_AddOrder.Goods_Info";
  }
  protected:
  explicit Request_AddOrder_Goods_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:grpc_ordermanagement.Request_AddOrder.Goods_Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_ordermanagement_5fordersystem_2eproto;
};
// -------------------------------------------------------------------

class Request_AddOrder_Order_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_ordermanagement.Request_AddOrder.Order_Data) */ {
 public:
  inline Request_AddOrder_Order_Data() : Request_AddOrder_Order_Data(nullptr) {}
  virtual ~Request_AddOrder_Order_Data();
  explicit constexpr Request_AddOrder_Order_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_AddOrder_Order_Data(const Request_AddOrder_Order_Data& from);
  Request_AddOrder_Order_Data(Request_AddOrder_Order_Data&& from) noexcept
    : Request_AddOrder_Order_Data() {
    *this = ::std::move(from);
  }

  inline Request_AddOrder_Order_Data& operator=(const Request_AddOrder_Order_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_AddOrder_Order_Data& operator=(Request_AddOrder_Order_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_AddOrder_Order_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_AddOrder_Order_Data* internal_default_instance() {
    return reinterpret_cast<const Request_AddOrder_Order_Data*>(
               &_Request_AddOrder_Order_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request_AddOrder_Order_Data& a, Request_AddOrder_Order_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_AddOrder_Order_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_AddOrder_Order_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_AddOrder_Order_Data* New() const final {
    return CreateMaybeMessage<Request_AddOrder_Order_Data>(nullptr);
  }

  Request_AddOrder_Order_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_AddOrder_Order_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_AddOrder_Order_Data& from);
  void MergeFrom(const Request_AddOrder_Order_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_AddOrder_Order_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_ordermanagement.Request_AddOrder.Order_Data";
  }
  protected:
  explicit Request_AddOrder_Order_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsInfoFieldNumber = 1,
    kGoodsPosFieldNumber = 2,
    kTargetPosFieldNumber = 3,
  };
  // .grpc_ordermanagement.Request_AddOrder.Goods_Info goods_info = 1;
  bool has_goods_info() const;
  private:
  bool _internal_has_goods_info() const;
  public:
  void clear_goods_info();
  const ::grpc_ordermanagement::Request_AddOrder_Goods_Info& goods_info() const;
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* release_goods_info();
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* mutable_goods_info();
  void set_allocated_goods_info(::grpc_ordermanagement::Request_AddOrder_Goods_Info* goods_info);
  private:
  const ::grpc_ordermanagement::Request_AddOrder_Goods_Info& _internal_goods_info() const;
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* _internal_mutable_goods_info();
  public:
  void unsafe_arena_set_allocated_goods_info(
      ::grpc_ordermanagement::Request_AddOrder_Goods_Info* goods_info);
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* unsafe_arena_release_goods_info();

  // int32 goods_pos = 2;
  bool has_goods_pos() const;
  private:
  bool _internal_has_goods_pos() const;
  public:
  void clear_goods_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 goods_pos() const;
  void set_goods_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goods_pos() const;
  void _internal_set_goods_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target_pos = 3;
  bool has_target_pos() const;
  private:
  bool _internal_has_target_pos() const;
  public:
  void clear_target_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 target_pos() const;
  void set_target_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_pos() const;
  void _internal_set_target_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_ordermanagement.Request_AddOrder.Order_Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* goods_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 goods_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_pos_;
  friend struct ::TableStruct_ordermanagement_5fordersystem_2eproto;
};
// -------------------------------------------------------------------

class Request_AddOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_ordermanagement.Request_AddOrder) */ {
 public:
  inline Request_AddOrder() : Request_AddOrder(nullptr) {}
  virtual ~Request_AddOrder();
  explicit constexpr Request_AddOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_AddOrder(const Request_AddOrder& from);
  Request_AddOrder(Request_AddOrder&& from) noexcept
    : Request_AddOrder() {
    *this = ::std::move(from);
  }

  inline Request_AddOrder& operator=(const Request_AddOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_AddOrder& operator=(Request_AddOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_AddOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_AddOrder* internal_default_instance() {
    return reinterpret_cast<const Request_AddOrder*>(
               &_Request_AddOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request_AddOrder& a, Request_AddOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_AddOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_AddOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_AddOrder* New() const final {
    return CreateMaybeMessage<Request_AddOrder>(nullptr);
  }

  Request_AddOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_AddOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_AddOrder& from);
  void MergeFrom(const Request_AddOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_AddOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_ordermanagement.Request_AddOrder";
  }
  protected:
  explicit Request_AddOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_AddOrder_Goods_Info Goods_Info;
  typedef Request_AddOrder_Order_Data Order_Data;

  typedef Request_AddOrder_TYPE TYPE;
  static constexpr TYPE MEAL_DELIVERY =
    Request_AddOrder_TYPE_MEAL_DELIVERY;
  static constexpr TYPE MEAL_RECEPTION =
    Request_AddOrder_TYPE_MEAL_RECEPTION;
  static inline bool TYPE_IsValid(int value) {
    return Request_AddOrder_TYPE_IsValid(value);
  }
  static constexpr TYPE TYPE_MIN =
    Request_AddOrder_TYPE_TYPE_MIN;
  static constexpr TYPE TYPE_MAX =
    Request_AddOrder_TYPE_TYPE_MAX;
  static constexpr int TYPE_ARRAYSIZE =
    Request_AddOrder_TYPE_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TYPE_descriptor() {
    return Request_AddOrder_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TYPE_Name.");
    return Request_AddOrder_TYPE_Name(enum_t_value);
  }
  static inline bool TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TYPE* value) {
    return Request_AddOrder_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .grpc_ordermanagement.Request_AddOrder.Order_Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::grpc_ordermanagement::Request_AddOrder_Order_Data& data() const;
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* release_data();
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* mutable_data();
  void set_allocated_data(::grpc_ordermanagement::Request_AddOrder_Order_Data* data);
  private:
  const ::grpc_ordermanagement::Request_AddOrder_Order_Data& _internal_data() const;
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::grpc_ordermanagement::Request_AddOrder_Order_Data* data);
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* unsafe_arena_release_data();

  // int32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .grpc_ordermanagement.Request_AddOrder.TYPE type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::grpc_ordermanagement::Request_AddOrder_TYPE type() const;
  void set_type(::grpc_ordermanagement::Request_AddOrder_TYPE value);
  private:
  ::grpc_ordermanagement::Request_AddOrder_TYPE _internal_type() const;
  void _internal_set_type(::grpc_ordermanagement::Request_AddOrder_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_ordermanagement.Request_AddOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  int type_;
  friend struct ::TableStruct_ordermanagement_5fordersystem_2eproto;
};
// -------------------------------------------------------------------

class Reply_AddOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_ordermanagement.Reply_AddOrder) */ {
 public:
  inline Reply_AddOrder() : Reply_AddOrder(nullptr) {}
  virtual ~Reply_AddOrder();
  explicit constexpr Reply_AddOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply_AddOrder(const Reply_AddOrder& from);
  Reply_AddOrder(Reply_AddOrder&& from) noexcept
    : Reply_AddOrder() {
    *this = ::std::move(from);
  }

  inline Reply_AddOrder& operator=(const Reply_AddOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply_AddOrder& operator=(Reply_AddOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply_AddOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply_AddOrder* internal_default_instance() {
    return reinterpret_cast<const Reply_AddOrder*>(
               &_Reply_AddOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Reply_AddOrder& a, Reply_AddOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply_AddOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply_AddOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply_AddOrder* New() const final {
    return CreateMaybeMessage<Reply_AddOrder>(nullptr);
  }

  Reply_AddOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply_AddOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply_AddOrder& from);
  void MergeFrom(const Reply_AddOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply_AddOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_ordermanagement.Reply_AddOrder";
  }
  protected:
  explicit Reply_AddOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderNumberFieldNumber = 1,
  };
  // int32 order_number = 1;
  bool has_order_number() const;
  private:
  bool _internal_has_order_number() const;
  public:
  void clear_order_number();
  ::PROTOBUF_NAMESPACE_ID::int32 order_number() const;
  void set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_number() const;
  void _internal_set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_ordermanagement.Reply_AddOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_number_;
  friend struct ::TableStruct_ordermanagement_5fordersystem_2eproto;
};
// -------------------------------------------------------------------

class Request_CancelOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_ordermanagement.Request_CancelOrder) */ {
 public:
  inline Request_CancelOrder() : Request_CancelOrder(nullptr) {}
  virtual ~Request_CancelOrder();
  explicit constexpr Request_CancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request_CancelOrder(const Request_CancelOrder& from);
  Request_CancelOrder(Request_CancelOrder&& from) noexcept
    : Request_CancelOrder() {
    *this = ::std::move(from);
  }

  inline Request_CancelOrder& operator=(const Request_CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_CancelOrder& operator=(Request_CancelOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_CancelOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request_CancelOrder* internal_default_instance() {
    return reinterpret_cast<const Request_CancelOrder*>(
               &_Request_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Request_CancelOrder& a, Request_CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_CancelOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request_CancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_CancelOrder* New() const final {
    return CreateMaybeMessage<Request_CancelOrder>(nullptr);
  }

  Request_CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_CancelOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_CancelOrder& from);
  void MergeFrom(const Request_CancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_CancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_ordermanagement.Request_CancelOrder";
  }
  protected:
  explicit Request_CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_CancelOrder_TYPE TYPE;
  static constexpr TYPE CANCEL =
    Request_CancelOrder_TYPE_CANCEL;
  static inline bool TYPE_IsValid(int value) {
    return Request_CancelOrder_TYPE_IsValid(value);
  }
  static constexpr TYPE TYPE_MIN =
    Request_CancelOrder_TYPE_TYPE_MIN;
  static constexpr TYPE TYPE_MAX =
    Request_CancelOrder_TYPE_TYPE_MAX;
  static constexpr int TYPE_ARRAYSIZE =
    Request_CancelOrder_TYPE_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TYPE_descriptor() {
    return Request_CancelOrder_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TYPE_Name.");
    return Request_CancelOrder_TYPE_Name(enum_t_value);
  }
  static inline bool TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TYPE* value) {
    return Request_CancelOrder_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrderNumberFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 order_number = 1;
  bool has_order_number() const;
  private:
  bool _internal_has_order_number() const;
  public:
  void clear_order_number();
  ::PROTOBUF_NAMESPACE_ID::int32 order_number() const;
  void set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_number() const;
  void _internal_set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .grpc_ordermanagement.Request_CancelOrder.TYPE type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::grpc_ordermanagement::Request_CancelOrder_TYPE type() const;
  void set_type(::grpc_ordermanagement::Request_CancelOrder_TYPE value);
  private:
  ::grpc_ordermanagement::Request_CancelOrder_TYPE _internal_type() const;
  void _internal_set_type(::grpc_ordermanagement::Request_CancelOrder_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_ordermanagement.Request_CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_number_;
  int type_;
  friend struct ::TableStruct_ordermanagement_5fordersystem_2eproto;
};
// -------------------------------------------------------------------

class Reply_CancelOrder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc_ordermanagement.Reply_CancelOrder) */ {
 public:
  inline Reply_CancelOrder() : Reply_CancelOrder(nullptr) {}
  virtual ~Reply_CancelOrder();
  explicit constexpr Reply_CancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reply_CancelOrder(const Reply_CancelOrder& from);
  Reply_CancelOrder(Reply_CancelOrder&& from) noexcept
    : Reply_CancelOrder() {
    *this = ::std::move(from);
  }

  inline Reply_CancelOrder& operator=(const Reply_CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply_CancelOrder& operator=(Reply_CancelOrder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply_CancelOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply_CancelOrder* internal_default_instance() {
    return reinterpret_cast<const Reply_CancelOrder*>(
               &_Reply_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Reply_CancelOrder& a, Reply_CancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply_CancelOrder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply_CancelOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply_CancelOrder* New() const final {
    return CreateMaybeMessage<Reply_CancelOrder>(nullptr);
  }

  Reply_CancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply_CancelOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply_CancelOrder& from);
  void MergeFrom(const Reply_CancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply_CancelOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc_ordermanagement.Reply_CancelOrder";
  }
  protected:
  explicit Reply_CancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ordermanagement_5fordersystem_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reply_CancelOrder_TYPE TYPE;
  static constexpr TYPE SUCCESS =
    Reply_CancelOrder_TYPE_SUCCESS;
  static constexpr TYPE FAIL =
    Reply_CancelOrder_TYPE_FAIL;
  static inline bool TYPE_IsValid(int value) {
    return Reply_CancelOrder_TYPE_IsValid(value);
  }
  static constexpr TYPE TYPE_MIN =
    Reply_CancelOrder_TYPE_TYPE_MIN;
  static constexpr TYPE TYPE_MAX =
    Reply_CancelOrder_TYPE_TYPE_MAX;
  static constexpr int TYPE_ARRAYSIZE =
    Reply_CancelOrder_TYPE_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TYPE_descriptor() {
    return Reply_CancelOrder_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TYPE_Name.");
    return Reply_CancelOrder_TYPE_Name(enum_t_value);
  }
  static inline bool TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TYPE* value) {
    return Reply_CancelOrder_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReplyCancelFieldNumber = 1,
  };
  // .grpc_ordermanagement.Reply_CancelOrder.TYPE reply_cancel = 1;
  bool has_reply_cancel() const;
  private:
  bool _internal_has_reply_cancel() const;
  public:
  void clear_reply_cancel();
  ::grpc_ordermanagement::Reply_CancelOrder_TYPE reply_cancel() const;
  void set_reply_cancel(::grpc_ordermanagement::Reply_CancelOrder_TYPE value);
  private:
  ::grpc_ordermanagement::Reply_CancelOrder_TYPE _internal_reply_cancel() const;
  void _internal_set_reply_cancel(::grpc_ordermanagement::Reply_CancelOrder_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:grpc_ordermanagement.Reply_CancelOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int reply_cancel_;
  friend struct ::TableStruct_ordermanagement_5fordersystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_AddOrder_Goods_Info

// string name = 1;
inline bool Request_AddOrder_Goods_Info::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_AddOrder_Goods_Info::has_name() const {
  return _internal_has_name();
}
inline void Request_AddOrder_Goods_Info::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_AddOrder_Goods_Info::name() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
  return _internal_name();
}
inline void Request_AddOrder_Goods_Info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
}
inline std::string* Request_AddOrder_Goods_Info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
  return _internal_mutable_name();
}
inline const std::string& Request_AddOrder_Goods_Info::_internal_name() const {
  return name_.Get();
}
inline void Request_AddOrder_Goods_Info::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Request_AddOrder_Goods_Info::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
}
inline void Request_AddOrder_Goods_Info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
}
inline void Request_AddOrder_Goods_Info::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
}
inline std::string* Request_AddOrder_Goods_Info::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Request_AddOrder_Goods_Info::release_name() {
  // @@protoc_insertion_point(field_release:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request_AddOrder_Goods_Info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc_ordermanagement.Request_AddOrder.Goods_Info.name)
}

// -------------------------------------------------------------------

// Request_AddOrder_Order_Data

// .grpc_ordermanagement.Request_AddOrder.Goods_Info goods_info = 1;
inline bool Request_AddOrder_Order_Data::_internal_has_goods_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || goods_info_ != nullptr);
  return value;
}
inline bool Request_AddOrder_Order_Data::has_goods_info() const {
  return _internal_has_goods_info();
}
inline void Request_AddOrder_Order_Data::clear_goods_info() {
  if (GetArena() == nullptr && goods_info_ != nullptr) {
    delete goods_info_;
  }
  goods_info_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::grpc_ordermanagement::Request_AddOrder_Goods_Info& Request_AddOrder_Order_Data::_internal_goods_info() const {
  const ::grpc_ordermanagement::Request_AddOrder_Goods_Info* p = goods_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_ordermanagement::Request_AddOrder_Goods_Info&>(
      ::grpc_ordermanagement::_Request_AddOrder_Goods_Info_default_instance_);
}
inline const ::grpc_ordermanagement::Request_AddOrder_Goods_Info& Request_AddOrder_Order_Data::goods_info() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_info)
  return _internal_goods_info();
}
inline void Request_AddOrder_Order_Data::unsafe_arena_set_allocated_goods_info(
    ::grpc_ordermanagement::Request_AddOrder_Goods_Info* goods_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goods_info_);
  }
  goods_info_ = goods_info;
  if (goods_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_info)
}
inline ::grpc_ordermanagement::Request_AddOrder_Goods_Info* Request_AddOrder_Order_Data::release_goods_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* temp = goods_info_;
  goods_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_ordermanagement::Request_AddOrder_Goods_Info* Request_AddOrder_Order_Data::unsafe_arena_release_goods_info() {
  // @@protoc_insertion_point(field_release:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_info)
  _has_bits_[0] &= ~0x00000001u;
  ::grpc_ordermanagement::Request_AddOrder_Goods_Info* temp = goods_info_;
  goods_info_ = nullptr;
  return temp;
}
inline ::grpc_ordermanagement::Request_AddOrder_Goods_Info* Request_AddOrder_Order_Data::_internal_mutable_goods_info() {
  _has_bits_[0] |= 0x00000001u;
  if (goods_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_ordermanagement::Request_AddOrder_Goods_Info>(GetArena());
    goods_info_ = p;
  }
  return goods_info_;
}
inline ::grpc_ordermanagement::Request_AddOrder_Goods_Info* Request_AddOrder_Order_Data::mutable_goods_info() {
  // @@protoc_insertion_point(field_mutable:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_info)
  return _internal_mutable_goods_info();
}
inline void Request_AddOrder_Order_Data::set_allocated_goods_info(::grpc_ordermanagement::Request_AddOrder_Goods_Info* goods_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete goods_info_;
  }
  if (goods_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goods_info);
    if (message_arena != submessage_arena) {
      goods_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goods_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  goods_info_ = goods_info;
  // @@protoc_insertion_point(field_set_allocated:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_info)
}

// int32 goods_pos = 2;
inline bool Request_AddOrder_Order_Data::_internal_has_goods_pos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_AddOrder_Order_Data::has_goods_pos() const {
  return _internal_has_goods_pos();
}
inline void Request_AddOrder_Order_Data::clear_goods_pos() {
  goods_pos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_AddOrder_Order_Data::_internal_goods_pos() const {
  return goods_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_AddOrder_Order_Data::goods_pos() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_pos)
  return _internal_goods_pos();
}
inline void Request_AddOrder_Order_Data::_internal_set_goods_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  goods_pos_ = value;
}
inline void Request_AddOrder_Order_Data::set_goods_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goods_pos(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_AddOrder.Order_Data.goods_pos)
}

// int32 target_pos = 3;
inline bool Request_AddOrder_Order_Data::_internal_has_target_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_AddOrder_Order_Data::has_target_pos() const {
  return _internal_has_target_pos();
}
inline void Request_AddOrder_Order_Data::clear_target_pos() {
  target_pos_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_AddOrder_Order_Data::_internal_target_pos() const {
  return target_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_AddOrder_Order_Data::target_pos() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.Order_Data.target_pos)
  return _internal_target_pos();
}
inline void Request_AddOrder_Order_Data::_internal_set_target_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  target_pos_ = value;
}
inline void Request_AddOrder_Order_Data::set_target_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_pos(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_AddOrder.Order_Data.target_pos)
}

// -------------------------------------------------------------------

// Request_AddOrder

// int32 number = 1;
inline bool Request_AddOrder::_internal_has_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_AddOrder::has_number() const {
  return _internal_has_number();
}
inline void Request_AddOrder::clear_number() {
  number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_AddOrder::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_AddOrder::number() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.number)
  return _internal_number();
}
inline void Request_AddOrder::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_ = value;
}
inline void Request_AddOrder::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_AddOrder.number)
}

// .grpc_ordermanagement.Request_AddOrder.TYPE type = 2;
inline bool Request_AddOrder::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request_AddOrder::has_type() const {
  return _internal_has_type();
}
inline void Request_AddOrder::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::grpc_ordermanagement::Request_AddOrder_TYPE Request_AddOrder::_internal_type() const {
  return static_cast< ::grpc_ordermanagement::Request_AddOrder_TYPE >(type_);
}
inline ::grpc_ordermanagement::Request_AddOrder_TYPE Request_AddOrder::type() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.type)
  return _internal_type();
}
inline void Request_AddOrder::_internal_set_type(::grpc_ordermanagement::Request_AddOrder_TYPE value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Request_AddOrder::set_type(::grpc_ordermanagement::Request_AddOrder_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_AddOrder.type)
}

// .grpc_ordermanagement.Request_AddOrder.Order_Data data = 3;
inline bool Request_AddOrder::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool Request_AddOrder::has_data() const {
  return _internal_has_data();
}
inline void Request_AddOrder::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::grpc_ordermanagement::Request_AddOrder_Order_Data& Request_AddOrder::_internal_data() const {
  const ::grpc_ordermanagement::Request_AddOrder_Order_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc_ordermanagement::Request_AddOrder_Order_Data&>(
      ::grpc_ordermanagement::_Request_AddOrder_Order_Data_default_instance_);
}
inline const ::grpc_ordermanagement::Request_AddOrder_Order_Data& Request_AddOrder::data() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_AddOrder.data)
  return _internal_data();
}
inline void Request_AddOrder::unsafe_arena_set_allocated_data(
    ::grpc_ordermanagement::Request_AddOrder_Order_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc_ordermanagement.Request_AddOrder.data)
}
inline ::grpc_ordermanagement::Request_AddOrder_Order_Data* Request_AddOrder::release_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc_ordermanagement::Request_AddOrder_Order_Data* Request_AddOrder::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:grpc_ordermanagement.Request_AddOrder.data)
  _has_bits_[0] &= ~0x00000001u;
  ::grpc_ordermanagement::Request_AddOrder_Order_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::grpc_ordermanagement::Request_AddOrder_Order_Data* Request_AddOrder::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc_ordermanagement::Request_AddOrder_Order_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::grpc_ordermanagement::Request_AddOrder_Order_Data* Request_AddOrder::mutable_data() {
  // @@protoc_insertion_point(field_mutable:grpc_ordermanagement.Request_AddOrder.data)
  return _internal_mutable_data();
}
inline void Request_AddOrder::set_allocated_data(::grpc_ordermanagement::Request_AddOrder_Order_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:grpc_ordermanagement.Request_AddOrder.data)
}

// -------------------------------------------------------------------

// Reply_AddOrder

// int32 order_number = 1;
inline bool Reply_AddOrder::_internal_has_order_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reply_AddOrder::has_order_number() const {
  return _internal_has_order_number();
}
inline void Reply_AddOrder::clear_order_number() {
  order_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reply_AddOrder::_internal_order_number() const {
  return order_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Reply_AddOrder::order_number() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Reply_AddOrder.order_number)
  return _internal_order_number();
}
inline void Reply_AddOrder::_internal_set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  order_number_ = value;
}
inline void Reply_AddOrder::set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_number(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Reply_AddOrder.order_number)
}

// -------------------------------------------------------------------

// Request_CancelOrder

// int32 order_number = 1;
inline bool Request_CancelOrder::_internal_has_order_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request_CancelOrder::has_order_number() const {
  return _internal_has_order_number();
}
inline void Request_CancelOrder::clear_order_number() {
  order_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_CancelOrder::_internal_order_number() const {
  return order_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request_CancelOrder::order_number() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_CancelOrder.order_number)
  return _internal_order_number();
}
inline void Request_CancelOrder::_internal_set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  order_number_ = value;
}
inline void Request_CancelOrder::set_order_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_number(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_CancelOrder.order_number)
}

// .grpc_ordermanagement.Request_CancelOrder.TYPE type = 2;
inline bool Request_CancelOrder::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request_CancelOrder::has_type() const {
  return _internal_has_type();
}
inline void Request_CancelOrder::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::grpc_ordermanagement::Request_CancelOrder_TYPE Request_CancelOrder::_internal_type() const {
  return static_cast< ::grpc_ordermanagement::Request_CancelOrder_TYPE >(type_);
}
inline ::grpc_ordermanagement::Request_CancelOrder_TYPE Request_CancelOrder::type() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Request_CancelOrder.type)
  return _internal_type();
}
inline void Request_CancelOrder::_internal_set_type(::grpc_ordermanagement::Request_CancelOrder_TYPE value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Request_CancelOrder::set_type(::grpc_ordermanagement::Request_CancelOrder_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Request_CancelOrder.type)
}

// -------------------------------------------------------------------

// Reply_CancelOrder

// .grpc_ordermanagement.Reply_CancelOrder.TYPE reply_cancel = 1;
inline bool Reply_CancelOrder::_internal_has_reply_cancel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reply_CancelOrder::has_reply_cancel() const {
  return _internal_has_reply_cancel();
}
inline void Reply_CancelOrder::clear_reply_cancel() {
  reply_cancel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::grpc_ordermanagement::Reply_CancelOrder_TYPE Reply_CancelOrder::_internal_reply_cancel() const {
  return static_cast< ::grpc_ordermanagement::Reply_CancelOrder_TYPE >(reply_cancel_);
}
inline ::grpc_ordermanagement::Reply_CancelOrder_TYPE Reply_CancelOrder::reply_cancel() const {
  // @@protoc_insertion_point(field_get:grpc_ordermanagement.Reply_CancelOrder.reply_cancel)
  return _internal_reply_cancel();
}
inline void Reply_CancelOrder::_internal_set_reply_cancel(::grpc_ordermanagement::Reply_CancelOrder_TYPE value) {
  _has_bits_[0] |= 0x00000001u;
  reply_cancel_ = value;
}
inline void Reply_CancelOrder::set_reply_cancel(::grpc_ordermanagement::Reply_CancelOrder_TYPE value) {
  _internal_set_reply_cancel(value);
  // @@protoc_insertion_point(field_set:grpc_ordermanagement.Reply_CancelOrder.reply_cancel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc_ordermanagement

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grpc_ordermanagement::Request_AddOrder_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc_ordermanagement::Request_AddOrder_TYPE>() {
  return ::grpc_ordermanagement::Request_AddOrder_TYPE_descriptor();
}
template <> struct is_proto_enum< ::grpc_ordermanagement::Request_CancelOrder_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc_ordermanagement::Request_CancelOrder_TYPE>() {
  return ::grpc_ordermanagement::Request_CancelOrder_TYPE_descriptor();
}
template <> struct is_proto_enum< ::grpc_ordermanagement::Reply_CancelOrder_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc_ordermanagement::Reply_CancelOrder_TYPE>() {
  return ::grpc_ordermanagement::Reply_CancelOrder_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ordermanagement_5fordersystem_2eproto
