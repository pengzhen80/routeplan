// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route_planner.proto

#include "route_planner.pb.h"
#include "route_planner.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace route_planner {

static const char* RoutePlanner_method_names[] = {
  "/route_planner.RoutePlanner/SendRoute",
  "/route_planner.RoutePlanner/SendOrder",
};

std::unique_ptr< RoutePlanner::Stub> RoutePlanner::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoutePlanner::Stub> stub(new RoutePlanner::Stub(channel));
  return stub;
}

RoutePlanner::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendRoute_(RoutePlanner_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendOrder_(RoutePlanner_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoutePlanner::Stub::SendRoute(::grpc::ClientContext* context, const ::route_planner::request& request, ::route_planner::route* response) {
  return ::grpc::internal::BlockingUnaryCall< ::route_planner::request, ::route_planner::route, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendRoute_, context, request, response);
}

void RoutePlanner::Stub::experimental_async::SendRoute(::grpc::ClientContext* context, const ::route_planner::request* request, ::route_planner::route* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::route_planner::request, ::route_planner::route, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendRoute_, context, request, response, std::move(f));
}

void RoutePlanner::Stub::experimental_async::SendRoute(::grpc::ClientContext* context, const ::route_planner::request* request, ::route_planner::route* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::route_planner::route>* RoutePlanner::Stub::PrepareAsyncSendRouteRaw(::grpc::ClientContext* context, const ::route_planner::request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::route_planner::route, ::route_planner::request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendRoute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::route_planner::route>* RoutePlanner::Stub::AsyncSendRouteRaw(::grpc::ClientContext* context, const ::route_planner::request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRouteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RoutePlanner::Stub::SendOrder(::grpc::ClientContext* context, const ::route_planner::route& request, ::route_planner::car_order* response) {
  return ::grpc::internal::BlockingUnaryCall< ::route_planner::route, ::route_planner::car_order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendOrder_, context, request, response);
}

void RoutePlanner::Stub::experimental_async::SendOrder(::grpc::ClientContext* context, const ::route_planner::route* request, ::route_planner::car_order* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::route_planner::route, ::route_planner::car_order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendOrder_, context, request, response, std::move(f));
}

void RoutePlanner::Stub::experimental_async::SendOrder(::grpc::ClientContext* context, const ::route_planner::route* request, ::route_planner::car_order* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::route_planner::car_order>* RoutePlanner::Stub::PrepareAsyncSendOrderRaw(::grpc::ClientContext* context, const ::route_planner::route& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::route_planner::car_order, ::route_planner::route, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::route_planner::car_order>* RoutePlanner::Stub::AsyncSendOrderRaw(::grpc::ClientContext* context, const ::route_planner::route& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

RoutePlanner::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutePlanner_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutePlanner::Service, ::route_planner::request, ::route_planner::route, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutePlanner::Service* service,
             ::grpc::ServerContext* ctx,
             const ::route_planner::request* req,
             ::route_planner::route* resp) {
               return service->SendRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoutePlanner_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoutePlanner::Service, ::route_planner::route, ::route_planner::car_order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoutePlanner::Service* service,
             ::grpc::ServerContext* ctx,
             const ::route_planner::route* req,
             ::route_planner::car_order* resp) {
               return service->SendOrder(ctx, req, resp);
             }, this)));
}

RoutePlanner::Service::~Service() {
}

::grpc::Status RoutePlanner::Service::SendRoute(::grpc::ServerContext* context, const ::route_planner::request* request, ::route_planner::route* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoutePlanner::Service::SendOrder(::grpc::ServerContext* context, const ::route_planner::route* request, ::route_planner::car_order* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace route_planner

