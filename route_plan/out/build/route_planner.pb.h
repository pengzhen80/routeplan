// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route_planner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_route_5fplanner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_route_5fplanner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_route_5fplanner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_route_5fplanner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_5fplanner_2eproto;
namespace route_planner {
class car_order;
class car_orderDefaultTypeInternal;
extern car_orderDefaultTypeInternal _car_order_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class route;
class routeDefaultTypeInternal;
extern routeDefaultTypeInternal _route_default_instance_;
}  // namespace route_planner
PROTOBUF_NAMESPACE_OPEN
template<> ::route_planner::car_order* Arena::CreateMaybeMessage<::route_planner::car_order>(Arena*);
template<> ::route_planner::request* Arena::CreateMaybeMessage<::route_planner::request>(Arena*);
template<> ::route_planner::route* Arena::CreateMaybeMessage<::route_planner::route>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace route_planner {

enum car_order_Car : int {
  car_order_Car_CAR_RUN = 0,
  car_order_Car_CAR_STOP = 1,
  car_order_Car_CAR_LEFT = 2,
  car_order_Car_CAR_RIGHT = 3,
  car_order_Car_car_order_Car_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  car_order_Car_car_order_Car_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool car_order_Car_IsValid(int value);
constexpr car_order_Car car_order_Car_Car_MIN = car_order_Car_CAR_RUN;
constexpr car_order_Car car_order_Car_Car_MAX = car_order_Car_CAR_RIGHT;
constexpr int car_order_Car_Car_ARRAYSIZE = car_order_Car_Car_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* car_order_Car_descriptor();
template<typename T>
inline const std::string& car_order_Car_Name(T enum_t_value) {
  static_assert(::std::is_same<T, car_order_Car>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function car_order_Car_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    car_order_Car_descriptor(), enum_t_value);
}
inline bool car_order_Car_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, car_order_Car* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<car_order_Car>(
    car_order_Car_descriptor(), name, value);
}
// ===================================================================

class request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_planner.request) */ {
 public:
  inline request() : request(nullptr) {}
  virtual ~request();

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const request& default_instance();

  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline request* New() const final {
    return CreateMaybeMessage<request>(nullptr);
  }

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_planner.request";
  }
  protected:
  explicit request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_route_5fplanner_2eproto);
    return ::descriptor_table_route_5fplanner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartIdFieldNumber = 1,
    kEndIdFieldNumber = 2,
  };
  // int32 start_id = 1;
  void clear_start_id();
  ::PROTOBUF_NAMESPACE_ID::int32 start_id() const;
  void set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_id() const;
  void _internal_set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_id = 2;
  void clear_end_id();
  ::PROTOBUF_NAMESPACE_ID::int32 end_id() const;
  void set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_id() const;
  void _internal_set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:route_planner.request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_route_5fplanner_2eproto;
};
// -------------------------------------------------------------------

class route PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_planner.route) */ {
 public:
  inline route() : route(nullptr) {}
  virtual ~route();

  route(const route& from);
  route(route&& from) noexcept
    : route() {
    *this = ::std::move(from);
  }

  inline route& operator=(const route& from) {
    CopyFrom(from);
    return *this;
  }
  inline route& operator=(route&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const route& default_instance();

  static inline const route* internal_default_instance() {
    return reinterpret_cast<const route*>(
               &_route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(route& a, route& b) {
    a.Swap(&b);
  }
  inline void Swap(route* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline route* New() const final {
    return CreateMaybeMessage<route>(nullptr);
  }

  route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const route& from);
  void MergeFrom(const route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_planner.route";
  }
  protected:
  explicit route(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_route_5fplanner_2eproto);
    return ::descriptor_table_route_5fplanner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated int32 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:route_planner.route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_route_5fplanner_2eproto;
};
// -------------------------------------------------------------------

class car_order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route_planner.car_order) */ {
 public:
  inline car_order() : car_order(nullptr) {}
  virtual ~car_order();

  car_order(const car_order& from);
  car_order(car_order&& from) noexcept
    : car_order() {
    *this = ::std::move(from);
  }

  inline car_order& operator=(const car_order& from) {
    CopyFrom(from);
    return *this;
  }
  inline car_order& operator=(car_order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const car_order& default_instance();

  static inline const car_order* internal_default_instance() {
    return reinterpret_cast<const car_order*>(
               &_car_order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(car_order& a, car_order& b) {
    a.Swap(&b);
  }
  inline void Swap(car_order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(car_order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline car_order* New() const final {
    return CreateMaybeMessage<car_order>(nullptr);
  }

  car_order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<car_order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const car_order& from);
  void MergeFrom(const car_order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(car_order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route_planner.car_order";
  }
  protected:
  explicit car_order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_route_5fplanner_2eproto);
    return ::descriptor_table_route_5fplanner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef car_order_Car Car;
  static constexpr Car CAR_RUN =
    car_order_Car_CAR_RUN;
  static constexpr Car CAR_STOP =
    car_order_Car_CAR_STOP;
  static constexpr Car CAR_LEFT =
    car_order_Car_CAR_LEFT;
  static constexpr Car CAR_RIGHT =
    car_order_Car_CAR_RIGHT;
  static inline bool Car_IsValid(int value) {
    return car_order_Car_IsValid(value);
  }
  static constexpr Car Car_MIN =
    car_order_Car_Car_MIN;
  static constexpr Car Car_MAX =
    car_order_Car_Car_MAX;
  static constexpr int Car_ARRAYSIZE =
    car_order_Car_Car_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Car_descriptor() {
    return car_order_Car_descriptor();
  }
  template<typename T>
  static inline const std::string& Car_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Car>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Car_Name.");
    return car_order_Car_Name(enum_t_value);
  }
  static inline bool Car_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Car* value) {
    return car_order_Car_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCarFieldNumber = 1,
  };
  // .route_planner.car_order.Car car = 1;
  void clear_car();
  ::route_planner::car_order_Car car() const;
  void set_car(::route_planner::car_order_Car value);
  private:
  ::route_planner::car_order_Car _internal_car() const;
  void _internal_set_car(::route_planner::car_order_Car value);
  public:

  // @@protoc_insertion_point(class_scope:route_planner.car_order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int car_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_route_5fplanner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// int32 start_id = 1;
inline void request::clear_start_id() {
  start_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_start_id() const {
  return start_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::start_id() const {
  // @@protoc_insertion_point(field_get:route_planner.request.start_id)
  return _internal_start_id();
}
inline void request::_internal_set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_id_ = value;
}
inline void request::set_start_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_id(value);
  // @@protoc_insertion_point(field_set:route_planner.request.start_id)
}

// int32 end_id = 2;
inline void request::clear_end_id() {
  end_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::_internal_end_id() const {
  return end_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 request::end_id() const {
  // @@protoc_insertion_point(field_get:route_planner.request.end_id)
  return _internal_end_id();
}
inline void request::_internal_set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_id_ = value;
}
inline void request::set_end_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_id(value);
  // @@protoc_insertion_point(field_set:route_planner.request.end_id)
}

// -------------------------------------------------------------------

// route

// repeated int32 ids = 1;
inline int route::_internal_ids_size() const {
  return ids_.size();
}
inline int route::ids_size() const {
  return _internal_ids_size();
}
inline void route::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 route::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 route::ids(int index) const {
  // @@protoc_insertion_point(field_get:route_planner.route.ids)
  return _internal_ids(index);
}
inline void route::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:route_planner.route.ids)
}
inline void route::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ids_.Add(value);
}
inline void route::add_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:route_planner.route.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
route::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
route::ids() const {
  // @@protoc_insertion_point(field_list:route_planner.route.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
route::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
route::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:route_planner.route.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// car_order

// .route_planner.car_order.Car car = 1;
inline void car_order::clear_car() {
  car_ = 0;
}
inline ::route_planner::car_order_Car car_order::_internal_car() const {
  return static_cast< ::route_planner::car_order_Car >(car_);
}
inline ::route_planner::car_order_Car car_order::car() const {
  // @@protoc_insertion_point(field_get:route_planner.car_order.car)
  return _internal_car();
}
inline void car_order::_internal_set_car(::route_planner::car_order_Car value) {
  
  car_ = value;
}
inline void car_order::set_car(::route_planner::car_order_Car value) {
  _internal_set_car(value);
  // @@protoc_insertion_point(field_set:route_planner.car_order.car)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace route_planner

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::route_planner::car_order_Car> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::route_planner::car_order_Car>() {
  return ::route_planner::car_order_Car_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_route_5fplanner_2eproto
